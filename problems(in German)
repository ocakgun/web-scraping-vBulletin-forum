As this project comes from a student's thesis in university contexts there was a need of documenting problems. As it may be interesting for others, below is shown a copy of the text about the problems about time consuming processes, debugging-requirements (logs) and error handling. It is written in German:

Während der Umsetzung des Projekts mussten zahlreiche Hürden überwunden werden, von denen einige hier vorgestellt werden. Um potenziellen Nachahmenden eine möglichst komfortable Ausgangslage zu verschaffen, werden hier die Fälle besprochen, deren Vermeidung eine grosse Zeitersparnis zur Folge haben.

#Zeiterfordnernis
Die vielen Requests im vorliegenden Projekt beanspruchen mehr Zeit als auf einem persönli-chen Computer normalerweise am Stück zur Verfügung gestellt werden kann. Das Sammeln der URLs aller Themen dauert etwa zwei Tage und 11 Stunden. Dies kann kaum durch die Bandbreite beeinflusst werden, weil hauptsächlich die Verzögerung (Delay) von durchschnittlich einer Sekunde dafür verantwortlich ist. Sobald den Code auf grosse Datenmengen an-wendet, ist es erforderlich, Server zu verwenden, die das Programm sogenannt headless aus-führen. Das Script ist deshalb so geschrieben, dass es keine absolute Pfade (z.B. zum Spei-chern von Dateien) enthält und mit den auf Servern verwendeten Python-Versionen kompa-tibel ist. Da der Output nicht beobachtet werden kann, ist es wichtig, eine Logdatei zu erstel-len, auf was im nächsten Abschnitt näher eingegangen wird.

#	Debugging
Der Log muss so aufgebaut sein, dass die einzelnen Schritte mit Zeitstempel nachvollzogen werden können, um Debugging zu ermöglichen. Debugging bezeichnet das Finden und Repa-rieren eines Fehlers in einem Programm. Es kam vor, dass das Script wider erwarten abgebro-chen ist oder nicht das erwartete Resultat lieferte. Eine wichtige Herangehensweise im De-bugging ist, ein Programm Schritt für Schritt zu beobachten, um den fehlerhaften Code zu identifizieren. Dafür ist es wichtig, die einzelnen Schritte schon in den Entwicklunsumge-bung zu markieren und stets im kleinen Rahmen zu testen, bevor man Code auf Zehntausen-de von Listeobjekte anwendet.
Das Script verwendet ein Modul logging, das so modifziert wurde, dass jeder notwendige Schritt nachvollzogen werden kann. Als positiver Nebeneffekt ist dadurch gewährleistet, dass die genaue Uhrzeit nachvollzogen werden kann, um die eine Seite nach URLs durchsucht worden ist.

#Error Handling
Es kommt trotz Delay und sorgfältigem Testen zu Verbindungsfehlern. Einige davon (z.B. ConnectionErrors) traten erst beim Anwenden auf grosse Datenmengen auf. Deshalb ist es wichtig, die Fehler zu hantieren. Im Script finden sich deshalb alle request-Befehle, die auf mehrere URLs angewendet werden in einem Try und Except-Block. Dabei handelt es sich um eine populäre Methode, um Fehler in Python zu hantieren. Sobald auffälliges Verhalten auftritt, wird die URL noch ein weiteres Mal aufgerufen. Wenn abermals ein Fehler auftritt, wird sie übersprungen. Diese Ausnahme wird protokolliert. Das Protokoll kann verwendet werden, um die fehlerhaften URLs zu einem späteren Zeitpunkt zu prüfen .
Ohne die Try-Except-Blöcke würde das Script bei einer Ausnahme abbrechen und müsste (mit verbesserten Code) nochmals von vorne gestartet werden
